#include <cctype>
#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {

        int checkRow[10][10] = { 0 };
        //check columns
        for (int col = 0; col < 9; col++)
        {
            int check[10] = { 0 };
            

            for (int row = 0; row < 9; row++)
            {
                char c = board[row][col];

                if (isdigit(c))
                {
                    if (check[c - 48] > 0)
                        return false;
                    else
                        check[c - 48]++;

                    if (checkRow[row][c - 48] > 0)
                        return false;
                    else
                        checkRow[row][c - 48]++;
                }
            }
        }

        //check 3x3
        //check columns
        for (int col = 0; col < 9; col+=3)
        {
            for (int row = 0; row < 9; row+=3)
            {
                int check[10] = { 0 };

                for (int r = 0; r < 3; r++)
                {
                    for (int c = 0; c < 3; c++)
                    {
                        char s = board[row + r][col + c];

                        if (isdigit(s))
                        {
                            if (check[s - 48] > 0)
                                return false;
                            else
                                check[s - 48]++;
                        }
                    }
                }
            }
        }


        return true;
    }
};

int main()
{
    Solution sol;

    vector<vector<char>> board1 = { {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '.', '.', '8', '.', '.', '7', '9'} };

    bool valid1 = sol.isValidSudoku(board1);

    std::cout << valid1 << std::endl;

    vector<vector<char>> board2 = { {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '.', '.', '8', '.', '.', '7', '9'} };

    bool valid2 = sol.isValidSudoku(board2);

    std::cout << valid2 << std::endl;

    vector<vector<char>> board3 = { {'7', '.', '.', '.', '4', '.', '.', '.', '.'},
                                    {'.', '.', '.', '8', '6', '5', '.', '.', '.'},
                                    {'.', '1', '.', '2', '.', '.', '.', '.', '.'},
                                    {'.', '.', '.', '.', '.', '9', '.', '.', '.'},
                                    {'.', '.', '.', '.', '5', '.', '5', '.', '.'},
                                    {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                    {'.', '.', '.', '.', '.', '.', '2', '.', '.'},
                                    {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                    {'.', '.', '.', '.', '.', '.', '.', '.', '.'} };


    bool valid3 = sol.isValidSudoku(board3);

    std::cout << valid3 << std::endl;

    vector<vector<char>> board4 = { {'.', '.', '.', '.', '5', '.', '.', '1', '.'},
                                    {'.', '4', '.', '3', '.', '.', '.', '.', '.'},
                                    {'.', '.', '.', '.', '.', '3', '.', '.', '1'},
                                    {'8', '.', '.', '.', '.', '.', '.', '2', '.'},
                                    {'.', '.', '2', '.', '7', '.', '.', '.', '.'},
                                    {'.', '1', '5', '.', '.', '.', '.', '.', '.'},
                                    {'.', '.', '.', '.', '.', '2', '.', '.', '.'},
                                    {'.', '2', '.', '9', '.', '.', '.', '.', '.'},
                                    {'.', '.', '4', '.', '.', '.', '.', '.', '.'} };


    bool valid4 = sol.isValidSudoku(board4);

    std::cout << valid4 << std::endl;

    return 0;




}